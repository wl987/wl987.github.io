import{_ as n,o as s,c as a,a as t}from"./app-5415a0ce.js";const p={},e=t(`<h1 id="树结构" tabindex="-1"><a class="header-anchor" href="#树结构" aria-hidden="true">#</a> 树结构</h1><ol><li>非线性结构</li><li>可以表示一对多的关系</li><li>树相关术语</li></ol><ul><li>树：n个节点构成的有限集合，n为0时，称为空树</li><li>节点的度：节点的子树个数</li><li>树的度：树的所有节点中最大的度数</li><li>叶节点：度为0的节点</li><li>父节点：有子树的节点是其子树的根节点的父节点</li><li>子节点：父节点相对应的节点</li><li>兄弟节点：具有同一父节点的各节点彼此是兄弟节点</li><li>路径长度：路径所包含边的个数为路径的长度 -节点的层次：根节点在1层，其他任意节点的层数是其父节点层数加1</li><li>树的深度：所有节点的最大层数是树的深度</li></ul><ol start="4"><li>二叉树：每个节点最多只能有2个子节点</li><li>二叉树可以为空，若不为空，由根节点和左子树、右子树两个不相交的二叉树组成</li><li>二叉树特性</li></ol><ul><li>第i层最大节点数：2^(i-1)</li><li>深度为k的二叉树最大节点总数：2^k-1</li><li>页节点个数+1为度为2的非页节点个数</li></ul><ol start="7"><li>二叉搜索树（BST）</li></ol><ul><li>可以为空</li><li>不为空，左子树所有键值小于根节点键值，右子树所有键值大于根节点键值</li><li>左右子树本身也是二叉搜索树 ８．二叉搜索树封装</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span><span class="token keyword">null</span>
  	<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key
      	<span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">null</span>
      	<span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token comment">//插入方法</span>
  	<span class="token class-name">BSt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insert</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">var</span> newnode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>newnode
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span>newnode<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token comment">//插入递归内部方法</span>
  	<span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insertNode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">oldnode<span class="token punctuation">,</span>newnode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token keyword">if</span><span class="token punctuation">(</span>oldnode<span class="token punctuation">.</span>key<span class="token operator">&gt;</span>newnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>oldnode<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            	oldnode<span class="token punctuation">.</span>left<span class="token operator">=</span>newnode
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>oldnode<span class="token punctuation">.</span>left<span class="token punctuation">,</span>newnode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>oldnode<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            	oldnode<span class="token punctuation">.</span>right<span class="token operator">=</span>newnode
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>oldnode<span class="token punctuation">.</span>right<span class="token punctuation">,</span>newnode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token comment">//先序遍历</span>
  <span class="token constant">BST</span><span class="token punctuation">.</span>prototyep<span class="token punctuation">.</span><span class="token function-variable function">preOrderTranversal</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">preOrderTranversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//先序遍历内部递归</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">preOrderTranversalNode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
      	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//中序遍历</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">midOrderTranversal</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTranversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//中序遍历内部递归</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">midOrderTranversalNode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
      	<span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//后序遍历</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">postOrderTranversal</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTranversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">postOrderTranversalNode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>handler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
      	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTranversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>handler<span class="token punctuation">)</span>
      	<span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//最大值</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">min</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">var</span> node<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>root
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	node<span class="token operator">=</span>node<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key
  <span class="token punctuation">}</span>
  <span class="token comment">//最小值</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">max</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">var</span> node<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>root
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	node<span class="token operator">=</span>node<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key
  <span class="token punctuation">}</span>
  <span class="token comment">//搜索方法</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">var</span> node<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>root
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	node<span class="token operator">=</span>node<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&gt;</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	node<span class="token operator">=</span>node<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//删除方法</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">var</span> current<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>root
    <span class="token keyword">var</span> parent<span class="token operator">=</span><span class="token keyword">null</span>
    <span class="token keyword">var</span> isLeft<span class="token operator">=</span><span class="token boolean">true</span>
    <span class="token comment">//查找</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token operator">!==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>current<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>isLeft<span class="token operator">=</span><span class="token boolean">true</span>
          	current<span class="token operator">=</span>current<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>isLeft<span class="token operator">=</span><span class="token boolean">false</span>
          	current<span class="token operator">=</span>current<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//删除叶子节点</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span><span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	parrent<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	parrent<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">null</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//删除带一个子节点的节点</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	 <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>current<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>left<span class="token operator">=</span>current<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>right<span class="token operator">=</span>current<span class="token punctuation">.</span>right
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>current<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>left<span class="token operator">=</span>current<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>right<span class="token operator">=</span>current<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    	<span class="token keyword">var</span> successor<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSuccessor</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>successor
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>left<span class="token operator">=</span>successor
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        	parent<span class="token punctuation">.</span>right<span class="token operator">=</span>successor
        <span class="token punctuation">}</span>
      	successor<span class="token punctuation">.</span>left<span class="token operator">=</span>current<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//查找后继方法</span>
  <span class="token class-name">BST</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuccessor</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">delnode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">var</span> successor<span class="token operator">=</span>delnode
    <span class="token keyword">var</span> current<span class="token operator">=</span>delnode<span class="token punctuation">.</span>right
    <span class="token keyword">var</span> successorParent<span class="token operator">=</span>delnode
    <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	successorParent<span class="token operator">=</span>successor
      	successor<span class="token operator">=</span>current
      	current<span class="token operator">=</span>current<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>successor<span class="token operator">!==</span>delnode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	successorParent<span class="token punctuation">.</span>left<span class="token operator">=</span>successor<span class="token punctuation">.</span>right
      	successor<span class="token punctuation">.</span>right<span class="token operator">=</span>delnode<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> successor
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","0621.html.vue"]]);export{k as default};
